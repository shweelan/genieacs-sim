#!/usr/bin/env -S node -r esm -r ts-node/register/transpile-only
"use strict";

import * as cluster from "cluster";
import * as pkg from "./package.json";
import * as path from "path";
import * as simulator from "./src/simulator";
import * as commander from "commander";

function resolvePath(p) {
  return path.resolve(process.cwd(), p);
}

export function start() {
  if (!cluster.isMaster) {
    const acsUrl = process.env["ACS_URL"];
    const dataModel = process.env["DATA_MODEL"];
    const serialNumber = process.env["SERIAL_NUMBER"];

    simulator.start(require(dataModel), serialNumber, acsUrl);
    return;
  }

  const program = commander
    .version(pkg.version)
    .description(pkg.description)
    .option(
      "-u, --acs-url [url]",
      "ACS URL to contact (default: http://127.0.0.1:7547/)",
      "http://127.0.0.1:7547/"
    )
    .option(
      "-m, --data-model [filename]",
      "Data model template",
      resolvePath,
      "./data_model_202BC1-BM632w-8KA8WA1151100043.json"
    )
    .option(
      "-p, --processes [count]",
      "Number of devices to simulate (default: 1)",
      parseFloat,
      1
    )
    .option(
      "-w, --wait [milliseconds]",
      "Waiting period between process spawning (default: 1000)",
      parseFloat,
      1000
    )
    .option(
      "-s, --serial [offset]",
      "Serial number offset (default: 0)",
      parseFloat,
      0
    )
    .parse(process.argv);

  if (!/^(http|https):\/\//.test(program.acsUrl)) {
    // eslint-disable-next-line no-console
    console.error("Invalid ACS URL");
    process.exit(1);
  }

  cluster.on("fork", worker => {
    // eslint-disable-next-line no-console
    console.log(`Simulator ${worker["env"]["SERIAL_NUMBER"]} started`);
  });

  cluster.on("exit", (worker, code, signal) => {
    // eslint-disable-next-line no-console
    console.log(
      `Simulator ${worker["env"]["SERIAL_NUMBER"]} died (${signal ||
        code}). Restarting in 10 seconds...`
    );
    setTimeout(() => {
      const newWorker = cluster.fork(worker["env"]);
      newWorker["env"] = worker["env"];
    }, 10000);
  });

  for (let i = 0; i < program.processes; ++i) {
    setTimeout(() => {
      const env = {
        SERIAL_NUMBER: `00000${program.serial + i}`.slice(-6),
        ACS_URL: program.acsUrl,
        DATA_MODEL: program.dataModel
      };
      const worker = cluster.fork(env);
      worker["env"] = env;
    }, i * program.wait);
  }
}

start();
